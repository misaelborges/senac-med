/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.projeto.senac.med.view;

import com.projeto.senac.med.dao.AgendamentoConsultaDAO;
import com.projeto.senac.med.exception.NegocioException;
import com.projeto.senac.med.model.AgendamentoConsulta;
import com.projeto.senac.med.model.AgendamentoConsultaDTO;
import com.projeto.senac.med.util.Conexao;
import com.projeto.senac.med.util.ValidadorData;
import java.awt.Component;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import java.util.stream.Collectors;
import javax.swing.SwingUtilities;

/**
 *
 * @author suzan
 */
public class Agendamentos extends javax.swing.JFrame {

    private final Connection connection = Conexao.conectar();
    private Long idPaciente;
    private Long idMedico;
    private Long idConsulta;

    /**
     * Creates new form Agendamentos
     */
    public Agendamentos() {
        initComponents();
        setResizable(false);
    }
    
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAgendametos = new javax.swing.JTable();
        txtPaciente = new javax.swing.JTextField();
        lblData = new javax.swing.JLabel();
        btnBuscaPaciente = new javax.swing.JButton();
        btnBuscaMedico = new javax.swing.JButton();
        lblHorario = new javax.swing.JLabel();
        lblHorario1 = new javax.swing.JLabel();
        comboBoxStatus = new javax.swing.JComboBox<>();
        btnAgendar = new javax.swing.JButton();
        txtData = new javax.swing.JFormattedTextField();
        btnAtualizar = new javax.swing.JButton();
        comboHora = new javax.swing.JComboBox<>();
        btnCancelar = new javax.swing.JButton();
        txtMedico = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Agendamentos dos pacientes");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Agendamentos");
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/SenacMed2025.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, Short.MAX_VALUE)
        );

        tblAgendametos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        tblAgendametos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Médico", "Paciente", "Data", "Horario", "Status"
            }
        ));
        tblAgendametos.setAutoscrolls(false);
        tblAgendametos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblAgendametos.setRowSelectionAllowed(false);
        tblAgendametos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAgendametosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblAgendametos);

        txtPaciente.setEditable(false);
        txtPaciente.setBackground(new java.awt.Color(255, 255, 255));
        txtPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPacienteActionPerformed(evt);
            }
        });

        lblData.setText("Data");

        btnBuscaPaciente.setBackground(new java.awt.Color(204, 255, 204));
        btnBuscaPaciente.setMnemonic('P');
        btnBuscaPaciente.setText("Busca Paciente");
        btnBuscaPaciente.setToolTipText("");
        btnBuscaPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscaPacienteActionPerformed(evt);
            }
        });

        btnBuscaMedico.setBackground(new java.awt.Color(255, 204, 204));
        btnBuscaMedico.setMnemonic('M');
        btnBuscaMedico.setText("Busca Médico");
        btnBuscaMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscaMedicoActionPerformed(evt);
            }
        });

        lblHorario.setText("Horario ");

        lblHorario1.setText("Status");

        comboBoxStatus.setForeground(new java.awt.Color(0, 0, 204));
        comboBoxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AGENDADO", "REALIZADO", "CANCELADO", " " }));
        comboBoxStatus.setEnabled(false);

        btnAgendar.setBackground(new java.awt.Color(153, 153, 255));
        btnAgendar.setMnemonic('A');
        btnAgendar.setText("Agendar");
        btnAgendar.setToolTipText("");
        btnAgendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgendarActionPerformed(evt);
            }
        });

        try {
            txtData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtData.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDataFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDataFocusLost(evt);
            }
        });
        txtData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataActionPerformed(evt);
            }
        });

        btnAtualizar.setMnemonic('T');
        btnAtualizar.setText("Atualiza");
        btnAtualizar.setEnabled(false);
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        comboHora.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                comboHoraPopupMenuWillBecomeVisible(evt);
            }
        });

        btnCancelar.setMnemonic('C');
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        txtMedico.setEditable(false);
        txtMedico.setBackground(new java.awt.Color(255, 255, 255));
        txtMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMedicoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBuscaMedico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBuscaPaciente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(btnAgendar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtMedico, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                                    .addComponent(txtPaciente, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addComponent(lblData, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(322, 322, 322)
                                .addComponent(lblHorario1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                .addComponent(lblHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                                .addComponent(comboHora, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(comboBoxStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscaMedico)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblData)
                    .addComponent(lblHorario)
                    .addComponent(comboHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscaPaciente)
                    .addComponent(txtPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHorario1)
                    .addComponent(comboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgendar)
                    .addComponent(btnAtualizar)
                    .addComponent(btnCancelar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPacienteActionPerformed

    private void btnBuscaPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscaPacienteActionPerformed
        //String nomePaciente = txtPaciente.getText();

        BuscaPacienteAgendamento buscaPacienteAgendamento = new BuscaPacienteAgendamento();
        buscaPacienteAgendamento.setVisible(true);

        buscaPacienteAgendamento.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                if (buscaPacienteAgendamento != null && buscaPacienteAgendamento.isDataAvailable()) {
                    String[] pacienteLocalizado = buscaPacienteAgendamento.getDataFromTextField();
                    txtPaciente.setText(pacienteLocalizado[1]);
                    idPaciente = Long.parseLong(pacienteLocalizado[0]);
                    carregaTabela();
                    txtPaciente.requestFocus();
                } else {
                    txtPaciente.setText("");
                    idPaciente = 0L;
                }
            }
        });

    }//GEN-LAST:event_btnBuscaPacienteActionPerformed


    private void btnBuscaMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscaMedicoActionPerformed
        //String nomeMedico = txtMedico.getText();
        BuscaMedicoAgendamento buscaMedicoAgendamento = new BuscaMedicoAgendamento();
        buscaMedicoAgendamento.setVisible(true);

        buscaMedicoAgendamento.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                if (buscaMedicoAgendamento != null && buscaMedicoAgendamento.isDataAvailable()) {
                    String[] medicoLocalizado = buscaMedicoAgendamento.getDataFromTextField();
                    txtMedico.setText(medicoLocalizado[1]);
                    idMedico = Long.parseLong(medicoLocalizado[0]);
                    carregaTabela();
                    txtMedico.requestFocus();
                } else {
                    txtMedico.setText("");
                    idMedico = 0L;
                }
            }
        });
    }//GEN-LAST:event_btnBuscaMedicoActionPerformed

    private void btnAgendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgendarActionPerformed
        if (!verificaCampos()) {
            return;
        }
        LocalDate dataDoDia = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate dataAgendamento = LocalDate.parse(txtData.getText(), formatter);
        if (dataAgendamento.isBefore(dataDoDia)) {
            System.out.println("A data informada é anterior à data atual.");
            JOptionPane.showMessageDialog(null, "A data informada é anterior à data atual.", "Atenção", 0);
            return;
        }

        try {
            connection.setAutoCommit(false);
            AgendamentoConsulta agendar = new AgendamentoConsulta(LocalDate.MAX, LocalTime.NOON, idMedico, idPaciente);
            AgendamentoConsultaDAO consultaDAO = new AgendamentoConsultaDAO(connection);

            DefaultComboBoxModel ComboagendamentoStatus = (DefaultComboBoxModel) this.comboBoxStatus.getModel();
            LocalTime horaAgendamento = LocalTime.parse(comboHora.getSelectedItem().toString());
            String status = ComboagendamentoStatus.getSelectedItem().toString();
            Long idMedico = this.idMedico;
            Long idPaciente = this.idPaciente;

            agendar.setData(dataAgendamento);
            agendar.setHora(horaAgendamento);
            agendar.setStatus(status);
            agendar.setIdMedico(idMedico);
            agendar.setIdPaciente(idPaciente);
            consultaDAO.Salva(agendar);
            SenacMed.getInstance().carregarTela();
            JOptionPane.showMessageDialog(this, "Agendamento cadastrado com sucesso!!!");
            carregaTabelaAll();
            limpaCampos();
        } catch (Exception e) {
            try {
                connection.rollback();
            } catch (SQLException ex) {
                System.getLogger(Agendamentos.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
            }
            throw new NegocioException("Houve algum erro durante o processamento de dados, entre em contato com o suporte", e);
        }
    }//GEN-LAST:event_btnAgendarActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        carregaTabelaAll();
    }//GEN-LAST:event_formWindowActivated

    private void txtDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataActionPerformed

    private void txtDataFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDataFocusLost
        if (!ValidadorData.dataValida(txtData.getText())) {
            JOptionPane.showMessageDialog(null, "A Data é inválida!", "Atenção", 0);
            //carregaTabela();
            txtData.requestFocus();
        } else if ((idMedico != null && idMedico != 0)) {
            LocalDate dataDoDia = LocalDate.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDate dataAgendamento = LocalDate.parse(txtData.getText(), formatter);
            if (dataAgendamento.isBefore(dataDoDia)) {
                System.out.println("A data informada é anterior à data atual.");
                JOptionPane.showMessageDialog(null, "A data informada é anterior à data atual.", "Atenção", 0);
                txtData.requestFocus();
                txtData.selectAll();
                txtData.setText("");
                return;
            }
            carregaTabela();
            carregaComboHora();

        } else {
            carregaTabela();
        }

    }//GEN-LAST:event_txtDataFocusLost

    private void tblAgendametosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAgendametosMouseClicked
        btnAtualizar.setEnabled(true);
        btnAgendar.setEnabled(false);
        comboBoxStatus.setEnabled(true);
        btnBuscaMedico.setEnabled(false);
        btnBuscaPaciente.setEnabled(false);

        int linha = tblAgendametos.getSelectedRow();

        if (linha != -1) {
            idConsulta = Long.parseLong(tblAgendametos.getValueAt(linha, 0).toString());
            txtMedico.setText(tblAgendametos.getValueAt(linha, 1).toString());
            txtPaciente.setText(tblAgendametos.getValueAt(linha, 2).toString());
            txtData.setText(tblAgendametos.getValueAt(linha, 3).toString());

            AgendamentoConsulta consulta = new AgendamentoConsulta();
            AgendamentoConsultaDAO listaConsultaDAO = new AgendamentoConsultaDAO(connection);

            try {
                consulta = listaConsultaDAO.buscaPorId(idConsulta);
                idMedico = consulta.getIdMedico();
                //carregaComboHora();
            } catch (Exception ex) {
                Logger.getLogger(Agendamentos.class.getName()).log(Level.SEVERE, null, ex);
            }

            DefaultComboBoxModel comboHorario = (DefaultComboBoxModel) this.comboHora.getModel();
            comboHorario.removeAllElements();
            comboHorario.addElement(tblAgendametos.getValueAt(linha, 4).toString());

            for (int i = 0; i < comboHora.getItemCount(); i++) {
                String item = comboHora.getItemAt(i);
                if (item.equalsIgnoreCase(tblAgendametos.getValueAt(linha, 4).toString())) {
                    comboHora.setSelectedIndex(i);
                    break;
                }
            }

            for (int i = 0; i < comboBoxStatus.getItemCount(); i++) {
                String item = comboBoxStatus.getItemAt(i);
                if (item.equalsIgnoreCase(tblAgendametos.getValueAt(linha, 5).toString())) {
                    comboBoxStatus.setSelectedIndex(i);
                    break;
                }
            }

        }
    }//GEN-LAST:event_tblAgendametosMouseClicked

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        if (!verificaCampos()) {
            return;
        }

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        try {
            connection.setAutoCommit(false);
            AgendamentoConsulta agendar = new AgendamentoConsulta();
            AgendamentoConsultaDAO consultaDAO = new AgendamentoConsultaDAO(connection);

            DefaultComboBoxModel ComboagendamentoStatus = (DefaultComboBoxModel) this.comboBoxStatus.getModel();

            LocalDate dataAgendamento = LocalDate.parse(txtData.getText(), formatter);
            LocalTime horaAgendamento = LocalTime.parse(comboHora.getSelectedItem().toString());

            String status = ComboagendamentoStatus.getSelectedItem().toString();

            agendar.setId(idConsulta);
            agendar.setData(dataAgendamento);
            agendar.setHora(horaAgendamento);
            agendar.setStatus(status);
            consultaDAO.Atualizar(agendar);
            SenacMed.getInstance().carregarTela();
            JOptionPane.showMessageDialog(this, "Agendamento atualizado com sucesso!!!");
            //carregaTabelaAll();
            limpaCampos();
        } catch (Exception e) {
            try {
                connection.rollback();
            } catch (SQLException ex) {
                System.getLogger(Agendamentos.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
            }
            throw new NegocioException("Houve algum erro durante o processamento de dados, entre em contato com o suporte", e);
        }
        btnAtualizar.setEnabled(false);
        btnAgendar.setEnabled(true);
        comboBoxStatus.setEnabled(false);
        btnBuscaMedico.setEnabled(true);
        btnBuscaPaciente.setEnabled(true);
        limpaCampos();
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        btnAtualizar.setEnabled(false);
        btnAgendar.setEnabled(true);
        comboBoxStatus.setEnabled(false);
        btnBuscaMedico.setEnabled(true);
        btnBuscaPaciente.setEnabled(true);

        limpaCampos();
        carregaTabelaAll();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void comboHoraPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboHoraPopupMenuWillBecomeVisible
        if (idMedico != null && idMedico != 0) {
            carregaTabela();
            carregaComboHora();
        }
    }//GEN-LAST:event_comboHoraPopupMenuWillBecomeVisible

    private void txtMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMedicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMedicoActionPerformed

    private void txtDataFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDataFocusGained
        SwingUtilities.invokeLater(() -> {
            txtData.selectAll();
        });

    }//GEN-LAST:event_txtDataFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Agendamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Agendamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Agendamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Agendamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Agendamentos().setVisible(true);
            }
        });
    }

    public static boolean horaValida(String hora) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        try {
            LocalTime.parse(hora, formatter);
            return true; // Hora válida
        } catch (DateTimeParseException e) {
            return false; // Hora inválida
        }
    }

    private void limpaCampos() {
        txtPaciente.setText(null);
        txtMedico.setText(null);
        txtData.setText("");
        comboHora.removeAllItems();
        comboBoxStatus.setSelectedIndex(0);
        txtMedico.requestFocus();
        idConsulta = null;
        idMedico = null;
        idPaciente = null;
    }

    private void carregaTabela() {
        AgendamentoConsultaDAO listaConsultaDAO = new AgendamentoConsultaDAO(connection);
        List<AgendamentoConsultaDTO> lista;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        try {
            if ((idPaciente != null && idPaciente != 0) && !(idMedico != null && idMedico != 0)) {
                lista = listaConsultaDAO.listarPorPaciente(idPaciente);
            } else if ((!(idPaciente != null && idPaciente != 0) && (idMedico != null && idMedico != 0))) {
                lista = listaConsultaDAO.listarPorMedico(idMedico);
            } else if ((idPaciente != null && idPaciente != 0) && (idMedico != null && idMedico != 0)) {
                lista = listaConsultaDAO.listarPorPaciente_Medico(idPaciente, idMedico);
            } else {
                lista = listaConsultaDAO.listar();
            }

            if ((idPaciente != null && idPaciente != 0) && (idMedico != null && idMedico != 0) && (ValidadorData.dataValida(txtData.getText()))) {
                LocalDate dataAgendamento = LocalDate.parse(txtData.getText(), formatter);
                lista = listaConsultaDAO.listarPorPaciente_Medico_Data(idPaciente, idMedico, dataAgendamento);
            } else if (!(idPaciente != null && idPaciente != 0) && !(idMedico != null && idMedico != 0) && (ValidadorData.dataValida(txtData.getText()))) {
                LocalDate dataAgendamento = LocalDate.parse(txtData.getText(), formatter);
                lista = listaConsultaDAO.listar(dataAgendamento);
            } else if ((idPaciente != null && idPaciente != 0) && !(idMedico != null && idMedico != 0) && (ValidadorData.dataValida(txtData.getText()))) {
                LocalDate dataAgendamento = LocalDate.parse(txtData.getText(), formatter);
                lista = listaConsultaDAO.listarPorPaciente_Data(idPaciente, dataAgendamento);
            } else if (!(idPaciente != null && idPaciente != 0) && (idMedico != null && idMedico != 0) && (ValidadorData.dataValida(txtData.getText()))) {
                LocalDate dataAgendamento = LocalDate.parse(txtData.getText(), formatter);
                lista = listaConsultaDAO.listarPorMedico_Data(idMedico, dataAgendamento);
            }

            DefaultTableModel model = (DefaultTableModel) tblAgendametos.getModel();
            model.setRowCount(0);

            if (!lista.isEmpty() && model.getRowCount() == 0) {
                for (AgendamentoConsultaDTO agenda : lista) {
                    model.addRow(new Object[]{
                        agenda.getId(),
                        agenda.getNomeMedico(),
                        agenda.getNomePaciente(),
                        agenda.getData().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                        agenda.getHora(),
                        agenda.getStatus(),});
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Agendamentos.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void carregaComboHora() {
        List<AgendamentoConsultaDTO> lista;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        List<LocalTime> todosHorarios = new ArrayList<>();
        todosHorarios.add(LocalTime.of(8, 0));
        todosHorarios.add(LocalTime.of(9, 0));
        todosHorarios.add(LocalTime.of(10, 0));
        todosHorarios.add(LocalTime.of(11, 0));
        todosHorarios.add(LocalTime.of(13, 0));
        todosHorarios.add(LocalTime.of(14, 0));
        todosHorarios.add(LocalTime.of(15, 0));
        todosHorarios.add(LocalTime.of(16, 0));
        todosHorarios.add(LocalTime.of(17, 0));

        try {
            AgendamentoConsultaDAO listaConsultaDAO = new AgendamentoConsultaDAO(connection);
            LocalDate dataAgendamento = LocalDate.parse(txtData.getText(), formatter);

            lista = listaConsultaDAO.listarPorMedico_Data(idMedico, dataAgendamento);

            Set<LocalTime> horariosAgendados = lista.stream()
                    .map(AgendamentoConsultaDTO::getHora)
                    .collect(Collectors.toSet());

            List<LocalTime> horariosDisponiveis = todosHorarios.stream()
                    .filter(h -> !horariosAgendados.contains(h))
                    .collect(Collectors.toList());

            // Transforma LocalTime em String formatada para exibir no JComboBox
            String[] horariosFormatados = horariosDisponiveis.stream()
                    .map(h -> h.toString()) // ou h.format(DateTimeFormatter.ofPattern("HH:mm"))
                    .toArray(String[]::new);
            DefaultComboBoxModel comboHorario = (DefaultComboBoxModel) comboHora.getModel();

            if (!horariosDisponiveis.isEmpty()) {
                comboHorario.removeAllElements();
                for (String horario : horariosFormatados) {
                    comboHorario.addElement(horario);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Agenda do Médico Lotada para esse dia!", "Atenção", 0);
                txtData.setText("");
                txtData.requestFocus();
                txtData.selectAll();
            }
        } catch (Exception ex) {
            Logger.getLogger(Agendamentos.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void carregaTabelaAll() {
        AgendamentoConsultaDAO listaConsultaDAO = new AgendamentoConsultaDAO(connection);
        List<AgendamentoConsultaDTO> lista;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        try {
            lista = listaConsultaDAO.listar();

            DefaultTableModel model = (DefaultTableModel) tblAgendametos.getModel();
            model.setRowCount(0);

            if (!lista.isEmpty() && model.getRowCount() == 0) {
                for (AgendamentoConsultaDTO agenda : lista) {
                    model.addRow(new Object[]{
                        agenda.getId(),
                        agenda.getNomeMedico(),
                        agenda.getNomePaciente(),
                        agenda.getData().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                        agenda.getHora(),
                        agenda.getStatus(),});
                }
            }
            ajustarLarguraColunas(tblAgendametos);
        } catch (Exception ex) {
            Logger.getLogger(Agendamentos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean verificaCampos() {
        if (txtMedico.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "O Campo Médico não pode estar vazio!", "Atenção", 0);
            txtMedico.requestFocus();
            return false;
        }

        if (txtPaciente.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "O Campo Paciente não pode estar vazio!", "Atenção", 0);
            txtPaciente.requestFocus();
            return false;
        }

        if (!ValidadorData.dataValida(txtData.getText())) {
            JOptionPane.showMessageDialog(null, "A Data é inválida!", "Atenção", 0);
            txtData.requestFocus();
            return false;
        }
        return true;

//        if (!horaValida(txtHora.getText())) {
//            JOptionPane.showMessageDialog(null, "Hora é invalida!", "Atenção", 0);
//            txtHora.requestFocus();
//            return false;
//        } else {
//            LocalTime horaAgendamento = LocalTime.parse(txtHora.getText());
//            LocalTime limiteMinimo = LocalTime.of(8, 0);
//            LocalTime limiteMaximo = LocalTime.of(18, 0);
//            LocalTime meioDiaI = LocalTime.of(11, 59);
//            LocalTime meioDiaF = LocalTime.of(13, 30);
//            if (horaAgendamento.isBefore(limiteMinimo) || horaAgendamento.isAfter(limiteMaximo)) {
//                JOptionPane.showMessageDialog(null, "Horário inválido! --> " + horaAgendamento, "Atenção", 0);
//                txtHora.requestFocus();
//                return false;
//            } else {
//                if (horaAgendamento.isAfter(meioDiaI) && horaAgendamento.isBefore(meioDiaF)) {
//                    JOptionPane.showMessageDialog(null, "Horário inválido, Clinica em intervalo de Almoço! --> " + horaAgendamento, "Atenção", 0);
//                    txtHora.requestFocus();
//                    return false;
//                }
//            }
//        }
    }

    public void ajustarLarguraColunas(JTable tabela) {
        final TableColumnModel modeloColunas = tabela.getColumnModel();

        for (int coluna = 0; coluna < tabela.getColumnCount(); coluna++) {
            int largura = 15; // Largura mínima

            for (int linha = 0; linha < tabela.getRowCount(); linha++) {
                TableCellRenderer renderizador = tabela.getCellRenderer(linha, coluna);
                Component componente = tabela.prepareRenderer(renderizador, linha, coluna);
                largura = Math.max(componente.getPreferredSize().width + 1, largura);
            }

            // Limita a largura máxima (opcional)
            if (largura > 300) {
                largura = 300;
            }

            modeloColunas.getColumn(coluna).setPreferredWidth(largura);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgendar;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnBuscaMedico;
    private javax.swing.JButton btnBuscaPaciente;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JComboBox<String> comboBoxStatus;
    private javax.swing.JComboBox<String> comboHora;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblHorario;
    private javax.swing.JLabel lblHorario1;
    private javax.swing.JTable tblAgendametos;
    private javax.swing.JFormattedTextField txtData;
    private javax.swing.JTextField txtMedico;
    private javax.swing.JTextField txtPaciente;
    // End of variables declaration//GEN-END:variables
}
